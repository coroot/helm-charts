{{- if and .Values.corootCE.enabled .Values.corootCE.useStatefulSet -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "coroot.fullname" . }}
  labels:
    {{- include "coroot.labels" . | nindent 4 }}
spec:
  serviceName: "{{ include "coroot.fullname" . }}"
  replicas: {{ .Values.corootCE.replicas }}
  selector:
    matchLabels:
      {{- include "coroot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.corootCE.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "coroot.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.corootCE.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "coroot.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.corootCE.podSecurityContext | nindent 8 }}
      {{- if .Values.corootCE.initContainers }}
      initContainers:
        {{- toYaml .Values.corootCE.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.corootCE.securityContext | nindent 12 }}
          image: "{{ .Values.corootCE.image.repository }}:{{ .Values.corootCE.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.corootCE.image.pullPolicy }}
          args:
            - --listen=:8080
            - --data-dir=/data
            {{- if and .Values.corootCE.bootstrap.refreshInterval  .Values.existingPrometheus.enabled }}
            - --bootstrap-prometheus-url={{ printf "http://%s.%s:%s" (.Values.existingPrometheus.service.serviceName) (.Values.existingPrometheus.service.serviceNamespace) (.Values.existingPrometheus.service.servicePort | toString ) }}
            - --bootstrap-refresh-interval={{ .Values.corootCE.bootstrap.refreshInterval }}
            {{- else if and .Values.corootCE.bootstrap.refreshInterval .Values.prometheus.enabled .Values.prometheus.server.enabled }}
            - --bootstrap-prometheus-url={{ printf "http://%s:%s" (include "coroot.prometheus.server.fullname" .) (.Values.prometheus.server.service.servicePort | toString ) }}
            - --bootstrap-refresh-interval={{ .Values.corootCE.bootstrap.refreshInterval }}
            {{- end }}
          env:
          {{- if and .Values.clickhouse.enabled }}
            - name: BOOTSTRAP_CLICKHOUSE_ADDRESS
              value: {{ printf "%s:%s" (include "coroot.clickhouse.fullname" .) (.Values.clickhouse.service.ports.tcp | toString ) }}
            {{- if .Values.clickhouse.auth.existingSecret }}
            - name: BOOTSTRAP_CLICKHOUSE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.clickhouse.auth.existingSecret }}
                  key: {{ .Values.clickhouse.auth.existingSecretKey }}
            {{- else }}
            - name: BOOTSTRAP_CLICKHOUSE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "coroot.clickhouse.fullname" . }}
                  key: "admin-password"
            {{- end }}
            - name: BOOTSTRAP_CLICKHOUSE_USER
              value: {{ .Values.corootCE.bootstrap.clickhouse.username }}
            - name: BOOTSTRAP_CLICKHOUSE_DATABASE
              value: {{ .Values.corootCE.bootstrap.clickhouse.database }}
          {{- end }}
          {{- with .Values.corootCE.env }}
          {{- . | toYaml | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            {{- toYaml .Values.corootCE.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: 
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.corootCE.persistentVolume.size | quote }}
      {{- with .Values.corootCE.persistentVolume.storageClassName }}
        storageClassName: {{ . }}
      {{- end }}
      {{- with .Values.corootCE.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.corootCE.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.corootCE.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
