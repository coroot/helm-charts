apiKey:

metricsRefreshInterval: 15s # Specifies the metric resolution interval.
cacheTTL: 30d # Duration for which Coroot retains the metric cache.
authAnonymousRole: # Allows access to Coroot without authentication if set (one of Admin, Editor, or Viewer).
authBootstrapAdminPassword: # Initial admin password for bootstrapping.

# replicas: 1 # Number of Coroot StatefulSet pods.

service:
  # type: ClusterIP # Service type (e.g., ClusterIP, NodePort, LoadBalancer).
  # port: 8080 # Service port number.
  # nodePort: # NodePort number (if type is NodePort).
  # annotations: # Annotations for Service.

# ingress: # Ingress configuration for Coroot.
#   className: Ingress class name (e.g., nginx, traefik; if not set the default IngressClass will be used).
#   host: # Domain name for Coroot (e.g., coroot.company.com).
#   path: # Path prefix for Coroot (e.g., /coroot).
#   annotations: # Annotations for Ingress.
#   tls: # TLS configuration.
#     hosts: # The array with host names
#     secretName: # The name of secret where TLS certificate and private key would be stored

storage:
  size: 10Gi # Volume size for Coroot storage.
#   className: "" # If not set, the default storage class will be used.
#   reclaimPolicy: Delete # Options: Retain (keeps PVC) or Delete (removes PVC on Coroot CR deletion).


resources:
  # requests:
  #   cpu: 1
  #   memory: 4Gi
  # limits:
  #   cpu:
  #   memory:

# env: # Environment variables for Coroot.
#   - name:
#     value:
#     valueFrom:

# Configuration for Coroot Node Agent.
nodeAgent:
#   priorityClassName: # Priority class for the node-agent pods.
#   update_strategy: # Update strategy for node-agent pods.
#   nodeSelector: # Restricts scheduling to nodes matching the specified labels.
#   affinity: # Affinity rules for node-agent pods.
#   tolerations: # Tolerations for node-agent pods.
#     - operator: Exists
#   podAnnotations: # Annotations for node-agent pods.
#   resources: # Resource requests and limits for the node-agent pods.
#     requests: 
#       cpu: 100m
#       memory: 200Mi
#     limits: 
#       cpu: 500m
#       memory: 1Gi
#   env: # Environment variables for the node-agent.
#   image: # If unspecified, the operator will automatically update Coroot Node Agent to the latest version from Coroot's public registry.
#     name:           # Specifies the full image reference (e.g., <private-registry>/coroot-node-agent:<version>)
#     pullPolicy:     # The image pull policy (e.g., Always, IfNotPresent, Never).
#     pullSecrets: [] # The pull secrets for pulling the image from a private registry.
#   trackPublicNetworks: ["0.0.0.0/0"] # Allow track connections to the specified IP networks (e.g., Y.Y.Y.Y/mask). By default, Coroot tracks all connections.
#   logCollector:
#     collectLogBasedMetrics: true # Collect log-based metrics. Disables `collectLogEntries` if set to false.
#     collectLogEntries: true      # Collect log entries and store them in ClickHouse.
#   ebpfTracer:
#     enabled: true # Collect traces and store them in ClickHouse.
#     sampling: "1.0" # Trace sampling rate (0.0 to 1.0).
#   ebpfProfiler:
#     enabled: true # Collect profiles and store them in ClickHouse.


# Configuration for Coroot Cluster Agent.
clusterAgent:
#   nodeSelector: # Restricts scheduling to nodes matching the specified labels.
#   affinity: # Affinity rules for cluster-agent.
#   tolerations: # Tolerations for cluster-agent.
#   podAnnotations: # Annotations for cluster-agent.
#   resources: # Resource requests and limits for cluster-agent.
#   env: # Environment variables for the cluster-agent.
#   image: # If unspecified, the operator will automatically update Coroot Cluster Agent to the latest version from Coroot's public registry.
#     name:           # Specifies the full image reference (e.g., <private-registry>/coroot-cluster-agent:<version>)
#     pullPolicy:     # The image pull policy (e.g., Always, IfNotPresent, Never).
#     pullSecrets: [] # The pull secrets for pulling the image from a private registry.
#   kubeStateMetrics:
#     image: # If unspecified, the operator will install Kube State Metrics from Coroot's public registry.
#       name:           # Specifies the full image reference (e.g., <private-registry>/kube-state-metrics:<version>)
#       pullPolicy:     # The image pull policy (e.g., Always, IfNotPresent, Never).
#       pullSecrets: [] # The pull secrets for pulling the image from a private registry.

prometheus:
  # nodeSelector: # Restricts scheduling to nodes matching the specified labels.
  # affinity: # Affinity rules for Prometheus.
  # tolerations: # Tolerations for Prometheus.
  storage:
    size: 10Gi # Volume size for Prometheus storage.
  #   className: "" # If not set, the default storage class will be used.
  #   reclaimPolicy: Delete # Options: Retain (keeps PVC) or Delete (removes PVC on Coroot CR deletion).
  # resources: # Resource requests and limits for Prometheus.
  # podAnnotations: # Annotations for Prometheus.
  # retention: 2d # Metrics retention time (e.g. 4h, 3d, 2w, 1y).
  # outOfOrderTimeWindow: 1h # The `storage.tsdb.out_of_order_time_window` Prometheus setting.
  # image: # If unspecified, the operator will install Prometheus from Coroot's public registry.
  #   name:           # Specifies the full image reference (e.g., <private-registry>/prometheus:<version>).
  #   pullPolicy:     # The image pull policy (e.g., Always, IfNotPresent, Never).
  #   pullSecrets: [] # The pull secrets for pulling the image from a private registry.

# Configuration for Clickhouse managed by the operator.
clickhouse:
  shards: 1 # Number of ClickHouse shards.
  replicas: 1 # Number of replicas per shard.
#   resources: # Resource requests and limits for Clickhouse pods.
  storage:
    size: 100Gi # Volume size for EACH ClickHouse instance.
#     className: "" # If not set, the default storage class will be used.
#     reclaimPolicy: Delete # Options: Retain (keeps PVC) or Delete (removes PVC on Coroot CR deletion).
#   nodeSelector: # Restricts scheduling to nodes matching the specified labels.
#   affinity: # Affinity rules for ClickHouse pods.
#   tolerations: # Tolerations for ClickHouse pods.
#   resources: # Resource requests and limits for ClickHouse pods.
#   podAnnotations: # Annotations for Clickhouse pods.
#   image: # If unspecified, the operator will install Clickhouse from Coroot's public registry.
#     name:           # Specifies the full image reference (e.g., <private-registry>/clickhouse-server:<version>)
#     pullPolicy:     # The image pull policy (e.g., Always, IfNotPresent, Never).
#     pullSecrets: [] # The pull secrets for pulling the image from a private registry.
#   keeper: # Configuration for ClickHouse Keeper.
#     replicas: 3 # Use only during initial setup, as changing the replica count for a running Keeper may cause it to fail.
#     nodeSelector: # Restricts scheduling to nodes matching the specified labels.
#     affinity: # Affinity rules for keeper pods.
#     tolerations: # Tolerations for keeper pods.
#     storage:
#       size: 10Gi # Volume size for keeper storage.
#       className: "" # If not set, the default storage class will be used.
#     resources: # Resource requests and limits for keeper pods.
#     podAnnotations: # Annotations for keeper pods.
#     image: # If unspecified, the operator will install Clickhouse Keeper from Coroot's public registry.
#       name:           # Specifies the full image reference (e.g., <private-registry>/clickhouse-keeper:<version>)
#       pullPolicy:     # The image pull policy (e.g., Always, IfNotPresent, Never).
#       pullSecrets: [] # The pull secrets for pulling the image from a private registry.

# Use an external ClickHouse instance instead of deploying one.
# externalClickhouse:
#   address: # Address of the external ClickHouse instance.
#   database: # Name of the database to be used.
#   user: # Username for accessing the external ClickHouse.
#   password: # Password for accessing the external ClickHouse (plain-text, not recommended).
#   passwordSecret: # Secret containing password.
#     name: # Name of the secret to select from.
#     key:  # Key of the secret to select from.

# Store configuration in a Postgres DB instead of SQLite (required if `replicas` > 1).
# postgres:
#   host: # Postgres host or service name.
#   port: 5432 # Postgres port (optional, default 5432).
#   database: # Name of the database.
#   user: # Username for accessing Postgres.
#   password: # Password for accessing postgres (plain-text, not recommended).
#   passwordSecret: # Secret containing password.
#     name: # Name of the secret to select from.
#     key:  # Key of the secret to select from.
#   params: # Extra parameters, e.g., sslmode and connect_timeout.
#     sslmode: disable
